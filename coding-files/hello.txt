plugins {
    id 'org.springframework.boot' version '2.6.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id "com.github.spotbugs" version "4.7.1"
    id 'checkstyle'
    id "org.sonarqube" version "3.3"
}

group = 'com.cognizant'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
def configDir = "${project.rootDir}/config"

repositories {
    maven {
        url = uri(getProperty("repository_url"))
        credentials {
            username = getProperty("repousername")
            password = getProperty("repopassword")
        }
    }
}

sonarqube {
  properties {
    property "sonar.qualitygate.wait", true
    property "sonar.host.url",System.getProperty("SONAR_HOST_URL")
    property "sonar.login",System.getProperty("SONAR_TOKEN")
  }
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation ("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    testImplementation 'com.squareup.okhttp3:okhttp:4.0.1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.0.1'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.slf4j:slf4j-api'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.security:spring-security-web'
    implementation 'org.springframework.security:spring-security-config'
    implementation 'com.auth0:jwks-rsa:0.20.2'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2', 'io.jsonwebtoken:jjwt-jackson:0.11.2'
    compileOnly 'org.projectlombok:lombok'
}

tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir("$buildDir/reports/jacoco")
}
jacocoTestReport {
    dependsOn test
}
jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = "CLASS"
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = "0.8".toBigDecimal()
            }

            excludes = [
                    "com.cognizant.quickstart.QuickstartTemplateSpringbootHelloworldApiApplication",
                    "com.cognizant.quickstart.util.*",
                    "com.cognizant.quickstart.config.*",
                    "com.cognizant.quickstart.constant.*",
                    "com.cognizant.quickstart.data.*",
                    "com.cognizant.quickstart.messages.data",
                    "com.cognizant.quickstart.messages.domain.Message",
                    "com.cognizant.quickstart.dto.ErrorResponse",
                    "com.cognizant.quickstart.exceptions.RestServiceExceptionHandler",
                    "com.cognizant.quickstart.messages.exceptions.MessageNotFoundException",
                    "com.cognizant.quickstart.QuickstartTemplateSpringbootDocumentDBHelloworldApiApplication",
                    "com.cognizant.quickstart.QuickstartTemplateSpringbootDocumentDBHelloworldApiApplication.1"
            ]
        }
    }
}

spotbugs {
    excludeFilter = file("$configDir/spotbug/spotbugs-exclude.xml")
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsTest {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

checkstyle {
    toolVersion = "8.43"
    configFile = file("$configDir/checkstyle/checkstyle.xml")
    configProperties = ["checkstyleSuppressionsPath ": file("$configDir/checkstyle/suppressions.xml")]
    maxWarnings = 0
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport
}
task copyPreCommitScript(type: Copy) {
    logger.info("copy pre-commit script")
    from new File(configDir, "/scripts/pre-commit")
    into new File(rootProject.rootDir, '.git/hooks')
    fileMode 0775
}

check.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification
check.dependsOn spotbugsMain
check.dependsOn spotbugsTest

defaultTasks("clean", "copyPreCommitScript", "build")
